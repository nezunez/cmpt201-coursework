f (head == NULL || data < head->data) {
          new_node->next = head;
                  head = new_node;
                      } else {
                                node_t *curr = head;
                                        node_t *prev = NULL;

                                                while (curr != NULL && curr->data <= data) {
                                                              prev = curr;
                                                                          curr = curr->next;
                                                                                  }

                                                        // Insert between prev and curr
                                                        //         prev->next = new_node;
                                                        //                 new_node->next = curr;
                                                        //                     }
                                                        //
                                                        //                         info.sum += data;
                                                        //                         }
                                                        //
                                                        //                         int
                                                        //                         index_of(uint64_t
                                                        //                         data) {
                                                        //                             node_t *curr
                                                        //                             = head;
                                                        //                                 int index
                                                        //                                 = 0;
                                                        //
                                                        //                                     while
                                                        //                                     (curr
                                                        //                                     !=
                                                        //                                     NULL)
                                                        //                                     {
                                                        //                                             if
                                                        //                                             (curr->data
                                                        //                                             ==
                                                        //                                             data)
                                                        //                                             {
                                                        //                                                         return
                                                        //                                                         index;
                                                        //                                                                 }
                                                        //                                                                         curr
                                                        //                                                                         =
                                                        //                                                                         curr->next;
                                                        //                                                                                 index++;
                                                        //                                                                                     }
                                                        //
                                                        //                                                                                         return
                                                        //                                                                                         -1;
                                                        //                                                                                         }
                                                        //
                                                        //                                                                                         int
                                                        //                                                                                         main(void)
                                                        //                                                                                         {
                                                        //                                                                                             insert_sorted(1);
                                                        //                                                                                                 insert_sorted(3);
                                                        //                                                                                                     insert_sorted(5);
                                                        //                                                                                                         insert_sorte#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define ASSERT(expr) \
    do { \
        if (!(expr)) { \
            fprintf(stderr, "Assertion failed: %s\n", #expr); \
            exit(1); \
        } \
    } while (0)

#define TEST(expr) \
    do { \
        if (!(expr)) { \
            fprintf(stderr, "Test failed: %s\n", #expr); \
            exit(1); \
        } \
    } while (0)

typedef struct node {
    uint64_t data;
    struct node *next;
} node_t;

typedef struct info {
    uint64_t sum;
} info_t;

static node_t *head = NULL;
static info_t info = {0};

void insert_sorted(uint64_t data) {
    node_t *new_node = (node_t *)malloc(sizeof(node_t));
    ASSERT(new_node != NULL);

    new_node->data = data;
    new_node->next = NULL;
d(2);

    TEST(info.sum == (1 + 3 + 5 + 2));
    TEST(index_of(2) == 1);

    return 0;
}

