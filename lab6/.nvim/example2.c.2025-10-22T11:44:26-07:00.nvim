_/ /    / /_(__  ) / / /
 example2.c
    1 #include <stdint.h>
    2 #include <stdio.h>
    3 #include <stdlib.h>
    4
    5 #define ASSERT(expr)
E   6 ┆ {                                                                                 ■ expected
id
    7 ┆ ┆ if (!(expr)) {
    8 ┆ ┆ ┆ fprintf(stderre (curr != NULL) {
    9 ┆ ┆ ┆ if (data < curr->data) {
   10 ┆ ┆ ┆ ┆ break;
   11 ┆ ┆ ┆ }
   12 ┆ ┆ ┆ ┆
   13 ┆ ┆ ┆ prev = curr;
   14 ┆ ┆ ┆ curr = curr->next;
   15 ┆ ┆ }
   16 ┆ ┆ ┆ ┆
   17 ┆ ┆ prev->next = new_node;
   18 ┆ ┆ if (curr != NULL) {
   19 ┆ ┆ ┆ new_node->next = curr->next;
   20 ┆ ┆ }
   21 ┆ }
   22 ┆
   23 ┆ info.sum += data;
   24 }
   25
   26 int index_of(uint64_t data) {
E  27 ┆ node_t *curr = head;     ■■■ use of undeclared identifier 'heLast login: Tue Oct 21 13:19:31 on ttys006
(base) nezunezu@nezu-macbook ~ % docker start -ai cmpt201
[oh-my-zsh] Would you like to update? [Y/n] y
Updating Oh My Zsh
master

Features:

 - bd295c0 [terraform]                Add aliases for workspace management (#12845)

Bug fixes:

 - f1934d2 [git]                      Improve ggu, ggl, gp, ggfl, ggp functions (#13370)
 - 853680f [history-substring-search] Honor `CASE_SENSITIVE` variable (#13360)
 - caba9ae [ssh]                      Use `grep -E` instead of `egrep` (#13380)

You can see the changelog with `omz changelog`
         __                                     __
  ____  / /_     ____ ___  __  __   ____  _____/ /_
 / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \
/ /_/ / / / /  / / / / / / /ad'; did you mean 'fread'?
   28 ┆ int index = 0;
   29 ┆
E  30 ┆ while (curr != NULL) {     ■ use of undeclared identifier 'curr'
E  31 ┆ ┆ if (curr->data == data) {     ■ use of undeclared identifier 'curr'
   32 ┆ ┆ ┆ return index;
   33 ┆ ┆ }
   34 ┆ ┆
E  35 ┆ ┆ curr = curr->next;     ■■ use of undeclared identifier 'curr'
   36 ┆ ┆ index++;
   37 ┆ }
   38 ┆
   39 ┆ return -1;
   40 }
   41
   42 int main() {
E  43 ┆ insert_sorted(1);     ■ call to undeclared function 'insert_sorted'; ISO C99 and later do not s
 INSERT  example2.c                                        W: 1  E: 19  unix | utf-8 | c    1%    1:1
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define ASSERT(expr)                                                           
  {                                                                            
    if (!(expr)) {                                                             
      fprintf(stderre (curr != NULL) {
      if (data < curr->data) {
        break;
      }

      prev = curr;
      curr = curr->next;
    }

    prev->next = new_node;
    if (curr != NULL) {
      new_node->next = curr->next;
    }
  }

  info.sum += data;
}

int index_of(uint64_t data) {
  node_t *curr = head;
  int index = 0;

  while (curr != NULL) {
    if (curr->data == data) {
      return index;
    }

    curr = curr->next;
    index++;
  }

  return -1;
}

int main() {
  insert_sorted(1);
  insert_sorted(3);
  insert_sorted(5);
  insert_sorted(2);

  TEST(info.sum == 1 + 3 + 5 + 2);
  TEST(index_of(2) == 1);

  return 0;
}, "Assertion fled: %s\n", #expr);                             \
      exit(1);                                                                 \
          }                                                                          \
  }

typedef struct node {
  uint64_t data;
  struct node *next;
} node_t;

typedef struct info {
  uint64_t sum;
} info_t;

node_t *head = NULL;
info_t info = {0};

void insert_sorted(uint64_t data) {
  node_t *new_node = malloc(sizeof(node_t));
  new_node->data = data;
  new_node->next = NULL;

  if (head == NULL) {
    head = new_node;
  } else if (data < head->data) {
    new_node->next = head;
    head = new_node;
  } else {
    node_t *curr = head;
    node_t *prev = NULL;

    whilailed: %s\n", #expr);                        \
      exit(1);                                                                 \
    }                                                                          \
  }

#define TEST(expr)                                                             \
  {                                                                            \
    if (!(expr)) {                              r
