#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

struct header {
  uint64_t size;
  struct header *next;
};

void print_out (char *format, void *data, size_t data_size) {
  char buf[BUF_SIZE];
  ssize_t len = snprintf(buf, BUF_SIZE, format, 
      data_size == sizeof(uint64_t) ? *(uint64_t *) data : *(void **) data);
  if (len < 0) {
    handle_error("snprintf");
  }
  write(STDOUT_FILENO, buf, len);
}

int main() {
  void *start = sbrk(256);
  if (start == (void *)-1)
   handle_error ("sbrk failed");

  struct header *block1 = (struct header *) start;
  struct header *block2 = (struct header *) ((char *) start + 128);
  
  block1->size = 128;
  block1->next = NULL;

  block2->size = 128;
  block2->next = block1;

  print_out ("block 1: %p\n", block1, sizeof(block1)); // block1 address
  print_out ("block 2: %p\n", block2, sizeof(block2)); // block2 address
  print_out ("block 1 size: %p\n", &block1->size, sizeof(block1->size)); // block1 size
  print_out ("block 1 next: %p\n", &block1->next, sizeof(block1->next)); // block1 next
  print_out ("block 2 size: %p\n", &block2->size, sizeof(block2->size)); // block2 size
  print_out ("block2 next: %p\n", &block2->next, sizeof(block2->next)); // block2 next

}
